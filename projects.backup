const router = require('express').Router();
const { Project, Template } = require('../../model/projectSchema');
const { Client } = require('../../model/userSchema');
const { isAdmin } = require('../../middleware/priv_check');
const { totalTime } = require('../../misc/time');

router.get('/', isAdmin, async (_, res)=>{
    try {
	const projects = await Project.find({});
	res.json(projects);
    } catch(error) { 
	console.log(error);
	res.status(500).json({'status':'failed', 'error':'internal error'});
    } 
});

router.get('/id/:id', isAdmin, async (req, res)=>{
    try {
	const project = await Project.findOne({ id: req.params.id });
	res.json({'status':'success', 'result': project });
    } catch(error) { 
	console.log(error);
	res.status(500).json({'status':'failed', 'error':'internal error'});
    } 
});

router.get('/templates', async (_, res)=>{
    try {
	const templates = await Template.find({});
	res.json(templates);
    } catch(error) {
	console.log(error);
	res.status(500).json({'status':'failed', 'error':'internal error'});
    }
});

router.get('/templates/:id', async (req, res)=>{
    try {
        const { id } = req.params;
    
	const result = await Template.findOne({ _id: id });
        if(result) {
            console.log(result)
            return res.json({"status":"success", result});
        }
        res.json({"status":"failed", "error":"No such process"})
    } catch(error) { 
	console.log(error);
	res.status(500).json({'status':'failed', 'error':'internal error'});
    } 
});

router.post('/create', isAdmin, async (req, res)=>{
    try {
	var { name, client, email, mobile_no, buffer, template, process, resources, } = req.body;
	
	var { t, process } = totalTime(0, new Date(), process);
        var total_time = t * buffer;
	let date = Date.now();
	let no_of_hrs = 8.5;
	let no_of_days = Math.ceil((total_time/(1000*60*60))/no_of_hrs);
	
	let no_of_wd = [0];
        
	for(let i=0; i < no_of_days; i++) {
	    date += 24*60*60*1000;
            if(no_of_wd.includes(new Date(date).getDay())) {
                date += 24*60*60*1000;
            }
	}
        process.forEach((_, index) => {
            process[index].remark = ""
            process[index].status = 0
        })
        
        var val = await Client.findOne({ $or: [{ email }, { mobile_no }] })
        if(val) {
            await Project.updateMany({ client: val.name }, { client} )
            await Client.findOneAndUpdate({ email, mobile_no, name: client }) 
        } else {
            val = new Client({ email, mobile_no, name: client })
            await val.save()
        }
        
        const priority = await Project.countDocuments();
	const project = new Project({name, client, client_id: val.id, buffer, template, process, priority, deadline: date, resources});
	await project.save();

        res.json({'status':'success'});
    } catch(error){
	console.log(error);
	res.status(500).json({'status':'failed', 'error':'internal error'});
    }
});

router.post('/update', isAdmin, async (req, res)=>{
    try {
	const { id, name, process } = req.body;

	await Project.findOneAndUpdate({ id }, { name, process });
	res.json({'status':'success'});
    } catch(error) {
	console.log(error);
	res.status(500).json({'status':'failed', 'error':'internal error'});
    }
});

router.post('/delete', isAdmin, async (req, res)=>{
    try {
        const { id } = req.body;
        const val = await Project.findOneAndDelete({ id });
        await Project.updateMany({ priority:{ $gt: val.priority} }, { $inc: { priority: -1}});
        res.json({'status':'success'});
    } catch(error) {
        res.status(500).json({"status":"failed", "error":"internal error"});
        console.log(error)
    }
});

router.post('/priority', isAdmin, async (req, res) => {
    try {
        const { id, priority, inc} = req.body;
        console.log(req.body);
        if(inc) {
            await Project.findOneAndUpdate({ priority: priority+1}, { priority });
            await Project.findOneAndUpdate({ id }, { priority: priority+1});
        } else {
            await Project.findOneAndUpdate({ priority: priority-1}, {priority: priority});
            await Project.findOneAndUpdate({ id }, { priority: priority-1})
        }
        res.json({'status':'success'});
    } catch(error) {
        console.log(error);
        res.status(500).json({});
    }
});

router.post('/template/copy', isAdmin, async (req, res) => {
    try {
        const { id } = req.body;
        console.log(req.body)
        const val = await Template.findOne({ _id: id })
        if(val) {
            console.log(val)
            const template = new Template({ name: val.name + " (copy)", process: val.process, time: val.time})
            await template.save()
        }
        res.json({'status':'success'})
    } catch(error) {
        console.log(error)
        res.status(500).json({'status':'success'});
    }
});

router.post('/template/create', isAdmin, async (req, res)=>{
    try {
	const { name, process } = req.body;
	console.log(process);

	const { t } = totalTime(0, 0, process);
	const template = new Template({ name, process, time: t });
	await template.save();
	res.json({'status':'success'});
    } catch(error){
	console.log(error);
	res.status(500).json({'status':'failed', 'error':'internal error'});
    }
});

router.post('/template/delete', isAdmin, async (req, res)=>{
    try {
	const { id } = req.body;
	console.log(process);

	await Template.findOneAndDelete({ _id: id });
	res.json({'status':'success'});
    } catch(error){
	console.log(error);
	res.status(500).json({'status':'failed', 'error':'internal error'});
    }
});

router.post('/template/update', isAdmin, async (req, res)=>{
    try {
	const { id, name, process } = req.body;
	// checks
        const { t } = totalTime(0, 0, process);
	await Template.findOneAndUpdate({ _id: id }, { name, process, time: t });
	res.json({'status':'success'});
    } catch(error) {
	console.log(error);
	res.status(500).json({'status':'failed', 'error':'internal error'});
    }
});

module.exports = router;
